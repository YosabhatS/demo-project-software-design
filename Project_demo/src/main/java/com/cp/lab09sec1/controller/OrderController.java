package com.cp.lab09sec1.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cp.lab09sec1.dto.MenuItemDTO;
import com.cp.lab09sec1.dto.OrderInfoDTO;
import com.cp.lab09sec1.dto.OrderRequest;
import com.cp.lab09sec1.service.OrderService;
import com.cp.lab09sec1.service.RemoteServiceException;
import com.cp.lab09sec1.service.ResourceNotFoundException;

import jakarta.validation.Valid;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController // üö© ‡πÉ‡∏ä‡πâ @RestController ‡∏ñ‡πâ‡∏≤ Controller ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
@RequestMapping("/api/orders") // üö© NEW: Base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web/Client Service
public class OrderController {
	private final OrderService orderService; 

    // Constructor Injection
    public OrderController(OrderService orderService) {
        this.orderService = orderService;
    }


    // ----------------------------------------------------------------------
    // üö© 1. GET /api/orders/table/{tableId} : ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô QR Code
    // ----------------------------------------------------------------------
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Order ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞: 
     * - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Order ‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (Status CREATED) ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Order ‡∏ô‡∏±‡πâ‡∏ô (200 OK)
     * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Order ‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 404 NOT FOUND (Web Client ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ)
     */
    @GetMapping("/table/{tableId}")
    public Mono<ResponseEntity<OrderInfoDTO>> getActiveOrderForTable(@PathVariable Long tableId) {
        
        return orderService.findActiveOrderByTable(tableId)
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 200 OK ‡∏û‡∏£‡πâ‡∏≠‡∏° OrderInfoDTO
            .map(order -> new ResponseEntity<>(order, HttpStatus.OK))
            
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error: Resource Not Found (Order ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏ö)
            .onErrorResume(ResourceNotFoundException.class, e -> 
                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 404 Not Found (‡πÑ‡∏°‡πà‡∏°‡∏µ Order ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ)
                Mono.just(new ResponseEntity<>(HttpStatus.NOT_FOUND))) 
            
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error: Remote Service Failure 
            .onErrorResume(RemoteServiceException.class, e -> 
                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 503 Service Unavailable
                Mono.just(new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE)));
    }


    // ----------------------------------------------------------------------
    // üö© 2. POST /api/orders : ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ tableId ‡∏à‡∏≤‡∏Å Request Body)
    // ----------------------------------------------------------------------
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
     */
    @PostMapping
    public Mono<ResponseEntity<OrderInfoDTO>> createNewOrder(@Valid @RequestBody OrderRequest request) {
        
        // üí° Request ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Table ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÅ‡∏•‡πâ‡∏ß
        return orderService.createNewOrder(request)
            .map(newOrder -> new ResponseEntity<>(newOrder, HttpStatus.CREATED))
            // ... (Error Handling ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            .onErrorResume(ResourceNotFoundException.class, e -> 
                Mono.just(new ResponseEntity<>(HttpStatus.NOT_FOUND)))
            .onErrorResume(RemoteServiceException.class, e -> 
                Mono.just(new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE)));
    }
    
    // ----------------------------------------------------------------------
    // üö© 3. GET /api/orders/{orderId} : ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    // ----------------------------------------------------------------------
    @GetMapping("/{orderId}")
    public Mono<ResponseEntity<OrderInfoDTO>> getOrderDetails(@PathVariable Long orderId) {
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
        return orderService.getOrderById(orderId)
            .map(order -> new ResponseEntity<>(order, HttpStatus.OK))
            .onErrorResume(ResourceNotFoundException.class, e -> 
                Mono.just(new ResponseEntity<>(HttpStatus.NOT_FOUND)))
            .onErrorResume(RemoteServiceException.class, e -> 
                Mono.just(new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE)));
    }
    
    @GetMapping("/menu")
    public Flux<MenuItemDTO> getAllMenuItems() {
        return orderService.getAllMenuItems()
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ResponseEntity ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Flux ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ Streaming ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error: Remote Service Failure (‡∏ñ‡πâ‡∏≤ Data Service ‡∏•‡πà‡∏°)
            .onErrorResume(RemoteServiceException.class, e -> {
                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 503 Service Unavailable (‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏¢‡∏ô Exception ‡∏ó‡∏µ‡πà WebFlux ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£)
                return Flux.error(new org.springframework.web.server.ResponseStatusException(
                    HttpStatus.SERVICE_UNAVAILABLE, "Data Service is unavailable to fetch menu"
                ));
            });
    }

}
